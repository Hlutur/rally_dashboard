#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rally_dashboard:server');
var http = require('http');
var browserSync = require('browser-sync');
var mqtt = require('mqtt');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  var options = {port: 1883, host: 'localhost'}
  var client = mqtt.connect(options);
  var topic = 'fullstackfest/car/#';


  console.log("Waiting for MQTT connection");
  client.on('connect', function () {
    console.log("Connected to mqtt");
    client.subscribe(topic);
    console.log('Subscribing to ',topic);

    io.sockets.on('connection', function(socket) {
      console.log("Socket Connected");

      socket.on('car_data_out', function(data) {
          console.log('car_data_out',data);

      });

      var handler = MessageHandler();

      client.on('message', function (topic, message) {
        console.log("Message received on" , topic);
        var data = handler.make_package(topic,message);
        socket.emit('car_data', data);
        console.log('$',data);
      });

      var x = 0;
      setInterval(function () {
          socket.emit('heartbeat', x++);
      }, 1500);

    });

 });





   browserSync({
      proxy: 'localhost:' + addr.port,
      files: ['public/**/*.{js,css}']
    });

}


function MessageHandler()
{
  var factory = {};
  function transform_message(message){
    var rc = {};
    if (message) {
      rc = JSON.parse(message.toString());
    }
    return rc;
  }

  factory.make_package = function(topic,message){
    var data = topic.split("/");
    var package = {
      type: data[1],
      car: data[2],
      action: data[3]
    };

    if (data[4]) package.code = data[4];

    package.payload = transform_message(message);
    return package;
  };

  return factory;
}

